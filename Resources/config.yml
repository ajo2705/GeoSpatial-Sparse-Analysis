CNN:
  hyperparameters:
    num_epochs: 10000
    batch_size: 128
    learning_rate: 2.0e-04
  early_stopper:
    patience: 2000
  model:
    file: linear_model_param
    class: ParameterizedCNN
    config :
      use_skip_connection: false
# Replace input_channels with number of input channels created in patch after raster processing
      input_channels: 60
      layers:
          - { out_channels: 128, kernel_size: 3, stride: 1, padding: 1}
          - { out_channels: 128, kernel_size: 3, stride: 1, padding: 1, pooling: { type: 'max', kernel_size: 2, stride: 2 }  }
          - { out_channels: 256, kernel_size: 3, stride: 1, padding: 1}
          - { out_channels: 256, kernel_size: 3, stride: 1, padding: 1, pooling: { type: 'max', kernel_size: 2, stride: 2 } }
          - { out_channels: 512, kernel_size: 3, stride: 1, padding: 1, pooling: { type: 'max', kernel_size: 2, stride: 2 } }
#          - { out_channels: 1024, kernel_size: 3, stride: 1, padding: 1, pooling: { type: 'avg', kernel_size: 2, stride: 2 } }
      adaptive_pooling: { output_size: [ 1, 1 ] }
      fully_connected: [ 512, 32, 1 ]
######## FOR DEEP NEURAL NETWORKS #########
      input_size: 24000
      output_size: 1
      hidden_size: [ 512, 256, 128 ]
  loss: WeightMSE

######## FOR LOSS LANDSCAPE VISUALIZATION #######
LossLandscape:
  plot:
    direction:
      x: "-1:1:20"
      y: "-1:1:20"
      dir_type: "weights"
      dir_file: ""
      xnorm: ""
      ynorm: ""
      xignore: ""
      yignore: ""
      same_dir: ""
      surf_file: ""
  trained_model:
    file1: ""
    file2: ""
    file3: ""
